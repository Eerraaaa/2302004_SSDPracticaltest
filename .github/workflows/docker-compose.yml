name: SIT Web Application CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_COMPOSE_VERSION: '2.20.0'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Create package.json for dependency scanning
      run: |
        cat > package.json << EOF
        {
          "name": "sit-secure-web-app",
          "version": "1.0.0",
          "description": "SIT Secure Web Application",
          "dependencies": {
            "express": "^4.18.2",
            "helmet": "^7.0.0",
            "cors": "^2.8.5"
          },
          "devDependencies": {
            "playwright": "^1.40.0",
            "jest": "^29.7.0"
          }
        }
        EOF
        
    - name: Install dependencies
      run: npm install
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate || true
        npm audit --json > audit-results.json || true
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'SIT-Web-App'
        path: '.'
        format: 'ALL'
        
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: dependency-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create required directories
      run: |
        mkdir -p git-repos gitea scripts auth
        
    - name: Verify docker-compose configuration
      run: docker-compose config
      
    - name: Start services
      run: |
        docker-compose up -d
        echo "Waiting for services to start..."
        sleep 30
        
    - name: Check service health
      run: |
        # Check if containers are running
        docker-compose ps
        
        # Check web server health
        curl -f http://127.0.0.1/health || exit 1
        echo "✅ Web server health check passed"
        
        # Check Git server
        curl -f http://127.0.0.1:3000/ || exit 1
        echo "✅ Git server health check passed"
        
    - name: Test web application endpoints
      run: |
        # Test homepage
        response=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/)
        if [ "$response" -eq 200 ]; then
          echo "✅ Homepage accessible"
        else
          echo "❌ Homepage failed with status: $response"
          exit 1
        fi
        
        # Test results page with valid input
        response=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1/results.html?q=test")
        if [ "$response" -eq 200 ]; then
          echo "✅ Results page accessible"
        else
          echo "❌ Results page failed with status: $response"
          exit 1
        fi
        
    - name: Test security validation
      run: |
        # Test that XSS content is handled (should still return 200 but be sanitized)
        curl -s "http://127.0.0.1/" > homepage.html
        if grep -q "XSS Attack Prevention" homepage.html; then
          echo "✅ XSS protection features found in homepage"
        else
          echo "❌ XSS protection not found"
          exit 1
        fi
        
        # Test SQL injection protection
        if grep -q "SQL Injection Prevention" homepage.html; then
          echo "✅ SQL injection protection features found"
        else
          echo "❌ SQL injection protection not found"
          exit 1
        fi
        
    - name: Integration test logs
      if: always()
      run: |
        echo "=== Container Status ==="
        docker-compose ps
        echo "=== Web Server Logs ==="
        docker-compose logs webserver
        echo "=== Git Server Logs ==="
        docker-compose logs gitserver
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  ui-testing:
    name: UI Testing with Playwright
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Create test environment
      run: |
        mkdir -p tests
        mkdir -p git-repos gitea scripts auth
        
    - name: Create UI test suite
      run: |
        cat > package.json << 'EOF'
        {
          "name": "sit-ui-tests",
          "version": "1.0.0",
          "devDependencies": {
            "@playwright/test": "^1.40.0"
          },
          "scripts": {
            "test": "playwright test",
            "test:headed": "playwright test --headed"
          }
        }
        EOF
        
        cat > playwright.config.js << 'EOF'
        module.exports = {
          testDir: './tests',
          timeout: 30000,
          expect: { timeout: 5000 },
          fullyParallel: true,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: process.env.CI ? 1 : undefined,
          reporter: 'html',
          use: {
            baseURL: 'http://127.0.0.1',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            { name: 'chromium', use: { ...require('@playwright/test').devices['Desktop Chrome'] } },
          ],
        };
        EOF
        
        cat > tests/webapp.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');

        test.describe('SIT Secure Web Application', () => {
          
          test('Homepage loads correctly', async ({ page }) => {
            await page.goto('/');
            await expect(page).toHaveTitle(/SIT Secure Search/);
            await expect(page.locator('h1')).toContainText('SIT Secure Search Application');
            await expect(page.locator('#searchTerm')).toBeVisible();
            await expect(page.locator('button[type="submit"]')).toBeVisible();
          });

          test('Search form validation works', async ({ page }) => {
            await page.goto('/');
            
            // Test empty input
            await page.click('button[type="submit"]');
            await expect(page.locator('#searchTerm:invalid')).toBeVisible();
          });

          test('Valid search redirects to results', async ({ page }) => {
            await page.goto('/');
            
            await page.fill('#searchTerm', 'valid search term');
            await page.click('button[type="submit"]');
            
            await page.waitForURL('**/results.html**');
            await expect(page).toHaveURL(/results\.html\?q=/);
            await expect(page.locator('.search-term')).toContainText('valid search term');
          });

          test('XSS attack prevention', async ({ page }) => {
            await page.goto('/');
            
            // Try XSS attack
            const xssPayload = '<script>alert("xss")</script>';
            await page.fill('#searchTerm', xssPayload);
            await page.click('button[type="submit"]');
            
            // Should show error and clear input
            await expect(page.locator('#errorMessage')).toBeVisible();
            await expect(page.locator('#errorMessage')).toContainText('XSS attack detected');
            await expect(page.locator('#searchTerm')).toHaveValue('');
          });

          test('SQL injection prevention', async ({ page }) => {
            await page.goto('/');
            
            // Try SQL injection
            const sqlPayload = "' OR 1=1 --";
            await page.fill('#searchTerm', sqlPayload);
            await page.click('button[type="submit"]');
            
            // Should show error and clear input
            await expect(page.locator('#errorMessage')).toBeVisible();
            await expect(page.locator('#errorMessage')).toContainText('SQL injection attack detected');
            await expect(page.locator('#searchTerm')).toHaveValue('');
          });

          test('Results page return button works', async ({ page }) => {
            await page.goto('/results.html?q=test');
            
            await expect(page.locator('.search-term')).toContainText('test');
            await page.click('.back-button');
            
            await expect(page).toHaveURL('/');
            await expect(page.locator('h1')).toContainText('SIT Secure Search Application');
          });

          test('Security features are displayed', async ({ page }) => {
            await page.goto('/');
            
            await expect(page.locator('text=XSS Attack Prevention')).toBeVisible();
            await expect(page.locator('text=SQL Injection Prevention')).toBeVisible();
            await expect(page.locator('text=OWASP C5')).toBeVisible();
          });

          test('Input length validation', async ({ page }) => {
            await page.goto('/');
            
            // Test very long input
            const longInput = 'a'.repeat(101);
            await page.fill('#searchTerm', longInput);
            await page.click('button[type="submit"]');
            
            await expect(page.locator('#errorMessage')).toBeVisible();
            await expect(page.locator('#errorMessage')).toContainText('too long');
          });
        });
        EOF
        
    - name: Install Playwright
      run: |
        npm install
        npx playwright install chromium
        
    - name: Start application for testing
      run: |
        docker-compose up -d
        echo "Waiting for application to start..."
        sleep 30
        
    - name: Verify application is running
      run: |
        curl -f http://127.0.0.1/ || exit 1
        echo "Application is ready for testing"
        
    - name: Run UI tests
      run: npm test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        
    - name: Upload test screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots
        path: test-results/
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [dependency-check, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: HTML/JS Security Analysis
      run: |
        echo "🔍 Analyzing HTML/JS for security issues..."
        
        # Check for potential security issues in HTML files
        find html/ -name "*.html" -exec grep -l "innerHTML\|document.write\|eval(" {} \; > potential-issues.txt || true
        
        if [ -s potential-issues.txt ]; then
          echo "⚠️ Potential security issues found:"
          cat potential-issues.txt
        else
          echo "✅ No obvious security issues found in HTML/JS"
        fi

  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [integration-test, ui-testing, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate deployment readiness
      run: |
        echo "🚀 Validating deployment readiness..."
        
        # Check required files exist
        required_files=("docker-compose.yml" "nginx.conf" "html/index.html" "html/results.html")
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        # Validate Docker Compose syntax
        docker-compose config > /dev/null
        echo "✅ Docker Compose configuration valid"
        
        # Check Git configuration
        if git config user.name | grep -q "Loke-Yin-Er" && git config user.email | grep -q "2302004@sit.singaporetech.edu.sg"; then
          echo "✅ Git configuration correct"
        else
          echo "ℹ️ Git configuration will be set during deployment"
        fi
        
    - name: Generate deployment summary
      run: |
        echo "📋 Deployment Summary" > deployment-summary.md
        echo "===================" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "**Repository:** 2302004_SSDPracticaltest" >> deployment-summary.md
        echo "**Author:** Loke-Yin-Er" >> deployment-summary.md
        echo "**Email:** 2302004@sit.singaporetech.edu.sg" >> deployment-summary.md
        echo "**Build Date:** $(date)" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "**Services:**" >> deployment-summary.md
        echo "- Web Server (Nginx): Port 80" >> deployment-summary.md
        echo "- Git Server (Gitea): Port 3000" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "**Security Features:**" >> deployment-summary.md
        echo "- XSS Attack Prevention" >> deployment-summary.md
        echo "- SQL Injection Prevention" >> deployment-summary.md
        echo "- Input Validation (OWASP C5)" >> deployment-summary.md
        echo "- Dependency Security Scanning" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "**Tests Passed:**" >> deployment-summary.md
        echo "- Integration Tests ✅" >> deployment-summary.md
        echo "- UI Tests ✅" >> deployment-summary.md
        echo "- Security Scans ✅" >> deployment-summary.md
        
        cat deployment-summary.md
        
    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md